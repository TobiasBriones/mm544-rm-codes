(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d238413"],{ff30:function(e,a,t){"use strict";t.r(a);var n=function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",[e._m(0),t("p",[t("vue-mathjax",{attrs:{formula:e.p1}})],1),e._m(1),t("p",[t("vue-mathjax",{attrs:{formula:e.p2}})],1),t("p",[t("vue-mathjax",{attrs:{formula:e.p3}})],1)])},r=[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("h2",[t("strong",[e._v("Definición Recursiva")])])},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("p",[t("strong",[e._v("Primer orden")])])}],s={name:"Home",data:function(){return{p1:"\n      Para cada entero positivo $m$ y cada entero $r$ tal que $0 \\leq r \\leq m$,\n       existe un código de Reed-Muller de orden $r$ $\\mathscr{RM}(r,m)$.\n      ",p2:"\n       El código de Reed-Muller de primer orden $\\mathscr{RM}(1,m)$ son códigos\n       binarios definidos por todos los enteros $m \\geq 1$ recursivamente por:\n\n       * $\\mathscr{RM}(1,1)=\\{00,01,10,11\\}=\\mathbb{Z}_2^2$\n       * para $m > 1$, $\\mathscr{RM}(1,m)=\\{ (\\textbf{u}, \\textbf{u}),\n             (\\textbf{u}, \\textbf{u+1}) | \\textbf{u} \\in \\mathscr{RM}(1, m-1) \\}$\n\n      ",p3:"\n      Es decir, $\\mathscr{RM}(1,1)$ es el código que consiste en todas las tuplas\n       binarias. $\\mathscr{RM}(1,2)$ es una copia de $\\mathscr{RM}(1,1)$\n       -duplicando cada tupla, por ejemplo, pasar de $Z_2^2$ a $Z_2^4$-\n        y además volver a duplicar dichas tuplas pero con el lado derecho sumándole\n        $\\textbf{1}$. Y así recursivamente para definir las siguientes $n-tuplas$\n         de los siguientes $\\mathscr{RM}(1,m)$.\n      "}}},o=s,i=t("2877"),u=Object(i["a"])(o,n,r,!1,null,null,null);a["default"]=u.exports}}]);
//# sourceMappingURL=chunk-2d238413.89d6e782.js.map